name: Deploy Monitoring

on:
  push:
    branches:
      - dev
      - main
    paths:
      - "infra/ansible/roles/monitoring/**"
      - "infra/ansible/roles/common/**"
      - ".github/workflows/cd-monitoring.yml"
  workflow_dispatch:

concurrency:
  group: monitoring-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Set up Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
          pip install ansible-lint

      - name: Configure Ansible Vault
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: echo -n "$ANSIBLE_VAULT_PASSWORD" > infra/ansible/.vault_pass

      - name: Authenticate to Google Cloud
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Create Terraform backend config
        env:
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
        working-directory: infra/terraform/gcp
        run: |
          echo "bucket = \"$GCS_BUCKET_NAME\"" > backend.conf
          echo "prefix = \"terraform/state\"" >> backend.conf

      - name: Initialize Terraform
        working-directory: infra/terraform/gcp
        run: terraform init -backend-config=backend.conf

      - name: Use existing SSH Key and Create tfvars
        env:
          SSH_PRIVATE_KEY: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.GCP_SSH_PUBLIC_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub

          cat > infra/terraform/gcp/terraform.tfvars << EOF
          project_id               = "${{ secrets.GCP_PROJECT_ID }}"
          region                   = "${{ secrets.GCP_REGION }}"
          zone                     = "${{ secrets.GCP_ZONE }}"
          ssh_user                 = "${{ secrets.GCP_SSH_USER }}"
          ssh_public_key_content   = "$SSH_PUBLIC_KEY"
          bucket_name              = "${{ secrets.GCS_BUCKET_NAME }}"
          service_account_email    = "schedule-backend@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          cloudflare_api_token     = "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          cloudflare_zone_id       = "${{ secrets.CLOUDFLARE_ZONE_ID }}"
          EOF

      - name: Setup SSH Agent and Config
        env:
          GCP_SSH_USER: ${{ secrets.GCP_SSH_USER }}
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

          cd infra/terraform/gcp
          BASTION_IP=$(terraform output -raw bastion_public_ip)
          cd ../../..

          cat > ~/.ssh/config << EOF
          Host bastion
            HostName $BASTION_IP
            User $GCP_SSH_USER
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            ForwardAgent yes

          Host 10.0.*.*
            User $GCP_SSH_USER
            IdentityFile ~/.ssh/id_rsa
            ProxyJump bastion
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF

          echo "--- Testing Connection to Bastion ---"
          ssh -o ConnectTimeout=30 bastion "echo 'SSH connection to bastion successful'"

      - name: Generate Ansible Inventory
        working-directory: infra/terraform/gcp
        run: |
          BASTION_IP=$(terraform output -raw bastion_public_ip)
          FRONTEND_IP=$(terraform output -raw frontend_private_ip)
          BACKEND_IP=$(terraform output -raw backend_private_ip)
          DATABASE_IP=$(terraform output -raw database_private_ip)
          MONITORING_IP=$(terraform output -raw monitoring_private_ip)
          SSH_USER="${{ secrets.GCP_SSH_USER }}"

          mkdir -p ../../ansible/inventory

          cat > ../../ansible/inventory/gcp.yml << EOF
          ---
          all:
            vars:
              ansible_user: $SSH_USER
              ansible_ssh_private_key_file: ~/.ssh/id_rsa
              ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
            children:
              bastion_group:
                hosts:
                  bastion_host:
                    ansible_host: $BASTION_IP
              private_instances:
                vars:
                  ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q $SSH_USER@$BASTION_IP -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
                children:
                  frontend_group:
                    hosts:
                      frontend_host:
                        ansible_host: $FRONTEND_IP
                  backend_group:
                    hosts:
                      backend_host:
                        ansible_host: $BACKEND_IP
                  database_group:
                    hosts:
                      database_host:
                        ansible_host: $DATABASE_IP
                  monitoring_group:
                    hosts:
                      monitoring_host:
                        ansible_host: $MONITORING_IP
          EOF

          echo "--- ANSIBLE INVENTORY CONTENT ---"
          cat ../../ansible/inventory/gcp.yml

      - name: Deploy Monitoring
        working-directory: infra/ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: |
          ansible-galaxy collection install community.docker

          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

          echo "=== SSH Agent Status ==="
          ssh-add -l

          echo "=== Inventory Check ==="
          ansible-inventory -i ./inventory/gcp.yml --list

          echo "=== Testing Monitoring Server Connection ==="
          ansible monitoring_group -i ./inventory/gcp.yml -m ping -vv

          echo "=== Running Monitoring Playbook ==="
          ansible-playbook deploy.yml \
            --tags monitoring \
            --vault-password-file .vault_pass \
            -i ./inventory/gcp.yml \
            -vv
