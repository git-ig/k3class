[INFO ] 2025-06-26 14:47:45.792 [Test worker] c.s.s.i.DepartmentServiceImpl - In update(entity = [Department(id=1, name=some department, disable=false)]
[INFO ] 2025-06-26 14:47:45.812 [Test worker] c.s.s.i.DepartmentServiceImpl - In save(entity = [Department(id=1, name=some department, disable=false)]
[INFO ] 2025-06-26 14:47:45.817 [Test worker] c.s.s.i.DepartmentServiceImpl - In update(entity = [Department(id=1, name=some department, disable=false)]
[INFO ] 2025-06-26 14:47:45.819 [Test worker] c.s.s.i.DepartmentServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:45.820 [Test worker] c.s.s.i.DepartmentServiceImpl - In save(entity = [Department(id=1, name=some department, disable=false)]
[INFO ] 2025-06-26 14:47:45.821 [Test worker] c.s.s.i.DepartmentServiceImpl - Enter into getAllTeachers with department id 3
[INFO ] 2025-06-26 14:47:45.831 [Test worker] c.s.s.i.DepartmentServiceImpl - In delete(entity = [Department(id=1, name=some department, disable=false)])
[INFO ] 2025-06-26 14:47:45.832 [Test worker] c.s.s.i.DepartmentServiceImpl - In getAll()
[INFO ] 2025-06-26 14:47:45.833 [Test worker] c.s.s.i.DepartmentServiceImpl - Enter into getAll of getDisabled
[INFO ] 2025-06-26 14:47:45.833 [Test worker] c.s.s.i.DepartmentServiceImpl - In getById(id = [2])
[INFO ] 2025-06-26 14:47:45.876 [Test worker] c.s.s.i.GroupServiceImpl - Enter into getAll of getDisabled
[INFO ] 2025-06-26 14:47:45.878 [Test worker] c.s.s.i.GroupServiceImpl - In save(entity = [Group(id=1, title=some group, disable=false, sortOrder=null)]
[INFO ] 2025-06-26 14:47:45.885 [Test worker] c.s.s.i.GroupServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:45.886 [Test worker] c.s.s.i.GroupServiceImpl - In service getByTeacherId(id = [1])
[INFO ] 2025-06-26 14:47:45.887 [Test worker] c.s.s.i.GroupServiceImpl - In getAll()
[INFO ] 2025-06-26 14:47:45.888 [Test worker] c.s.s.i.GroupServiceImpl - In delete(entity = [Group(id=1, title=some group, disable=false, sortOrder=null)])
[INFO ] 2025-06-26 14:47:45.889 [Test worker] c.s.s.i.GroupServiceImpl - Enter into getGroupsByGroupIds
[INFO ] 2025-06-26 14:47:45.890 [Test worker] c.s.s.i.GroupServiceImpl - In update(entity = [Group(id=1, title=some group, disable=false, sortOrder=null)]
[INFO ] 2025-06-26 14:47:45.891 [Test worker] c.s.s.i.GroupServiceImpl - Enter into getGroupsBySemesterId
[INFO ] 2025-06-26 14:47:45.892 [Test worker] c.s.s.i.GroupServiceImpl - In save(entity = [Group(id=1, title=some group, disable=false, sortOrder=null)]
[INFO ] 2025-06-26 14:47:45.893 [Test worker] c.s.s.i.GroupServiceImpl - In isExistsById(id = [1])
[INFO ] 2025-06-26 14:47:45.895 [Test worker] c.s.s.i.GroupServiceImpl - Enter into getGroupsByCurrentSemester
[INFO ] 2025-06-26 14:47:45.896 [Test worker] c.s.s.i.GroupServiceImpl - Enter into getGroupsByCurrentSemester
[INFO ] 2025-06-26 14:47:45.896 [Test worker] c.s.s.i.GroupServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:45.898 [Test worker] c.s.s.i.GroupServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:45.898 [Test worker] c.s.s.i.GroupServiceImpl - In getWithStudentsById(id = [1])
[INFO ] 2025-06-26 14:47:45.931 [Test worker] c.s.s.i.LessonServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:45.933 [Test worker] c.s.s.i.LessonServiceImpl - In update(entity = [Lesson(id=1, hours=1, linkToMeeting=https://softserveinc.zoom.us/j/93198369163?pwd=Rk1GU281cDFtK1FCK3pJWXphRkJrQT09, subjectForSite=Human anatomy, lessonType=LECTURE, teacher=Teacher(id=10, name=Ivan, surname=Ivanov, patronymic=Ivanovych, position=Docent, userId=1, department=null, disable=false), subject=com.softserve.entity.Subject@5cdf6014, group=Group(id=1, title=group, disable=false, sortOrder=null), semester=Semester(id=4, description=null, year=2020, startDay=2020-01-20, endDay=2020-02-20, currentSemester=true, defaultSemester=false, daysOfWeek=null, periods=[Period(id=null, startTime=null, endTime=null, name=null)], groups=null, disable=false), grouped=false)]
[INFO ] 2025-06-26 14:47:45.962 [Test worker] c.s.s.i.LessonServiceImpl - In isLessonForGroupExistsAndIgnoreWithId(lesson = [Lesson(id=1, hours=1, linkToMeeting=https://softserveinc.zoom.us/j/93198369163?pwd=Rk1GU281cDFtK1FCK3pJWXphRkJrQT09, subjectForSite=Human anatomy, lessonType=LECTURE, teacher=Teacher(id=10, name=Ivan, surname=Ivanov, patronymic=Ivanovych, position=Docent, userId=1, department=null, disable=false), subject=com.softserve.entity.Subject@5cdf6014, group=Group(id=1, title=group, disable=false, sortOrder=null), semester=Semester(id=4, description=null, year=2020, startDay=2020-01-20, endDay=2020-02-20, currentSemester=true, defaultSemester=false, daysOfWeek=null, periods=[Period(id=null, startTime=null, endTime=null, name=null)], groups=null, disable=false), grouped=false)])
[INFO ] 2025-06-26 14:47:45.963 [Test worker] c.s.s.i.LessonServiceImpl - In save(entity = [Lesson(id=1, hours=1, linkToMeeting=https://softserveinc.zoom.us/j/93198369163?pwd=Rk1GU281cDFtK1FCK3pJWXphRkJrQT09, subjectForSite=Human anatomy, lessonType=LECTURE, teacher=Teacher(id=10, name=Ivan, surname=Ivanov, patronymic=Ivanovych, position=Docent, userId=1, department=null, disable=false), subject=com.softserve.entity.Subject@5cdf6014, group=Group(id=1, title=group, disable=false, sortOrder=null), semester=null, grouped=false)]
[INFO ] 2025-06-26 14:47:45.963 [Test worker] c.s.s.i.LessonServiceImpl - In isLessonForGroupExists(lesson = [Lesson(id=1, hours=1, linkToMeeting=https://softserveinc.zoom.us/j/93198369163?pwd=Rk1GU281cDFtK1FCK3pJWXphRkJrQT09, subjectForSite=Human anatomy, lessonType=LECTURE, teacher=Teacher(id=10, name=Ivan, surname=Ivanov, patronymic=Ivanovych, position=Docent, userId=1, department=null, disable=false), subject=com.softserve.entity.Subject@5cdf6014, group=Group(id=1, title=group, disable=false, sortOrder=null), semester=null, grouped=false)])
[INFO ] 2025-06-26 14:47:45.964 [Test worker] c.s.s.i.LessonServiceImpl - In getById(id = [2])
[INFO ] 2025-06-26 14:47:45.965 [Test worker] c.s.s.i.LessonServiceImpl - In service updateLinkToMeeting lesson = [Lesson(id=null, hours=0, linkToMeeting=https://www.youtube.com/, subjectForSite=null, lessonType=LECTURE, teacher=Teacher(id=5, name=null, surname=null, patronymic=null, position=null, userId=null, department=null, disable=false), subject=com.softserve.entity.Subject@84a8e, group=null, semester=Semester(id=7, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false), grouped=false)]
[INFO ] 2025-06-26 14:47:45.965 [Test worker] c.s.s.i.LessonServiceImpl - In service updateLinkToMeeting lesson = [Lesson(id=null, hours=0, linkToMeeting=https://www.youtube.com/, subjectForSite=null, lessonType=null, teacher=Teacher(id=5, name=null, surname=null, patronymic=null, position=null, userId=null, department=null, disable=false), subject=com.softserve.entity.Subject@84a8e, group=null, semester=Semester(id=7, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false), grouped=false)]
[INFO ] 2025-06-26 14:47:45.965 [Test worker] c.s.s.i.LessonServiceImpl - In service updateLinkToMeeting lesson = [Lesson(id=null, hours=0, linkToMeeting=https://www.youtube.com/, subjectForSite=null, lessonType=null, teacher=Teacher(id=5, name=null, surname=null, patronymic=null, position=null, userId=null, department=null, disable=false), subject=null, group=null, semester=Semester(id=7, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false), grouped=false)]
[INFO ] 2025-06-26 14:47:45.966 [Test worker] c.s.s.i.LessonServiceImpl - In update(entity = [Lesson(id=1, hours=1, linkToMeeting=https://softserveinc.zoom.us/j/93198369163?pwd=Rk1GU281cDFtK1FCK3pJWXphRkJrQT09, subjectForSite=Human anatomy, lessonType=LECTURE, teacher=Teacher(id=10, name=Ivan, surname=Ivanov, patronymic=Ivanovych, position=Docent, userId=1, department=null, disable=false), subject=com.softserve.entity.Subject@5cdf6014, group=Group(id=1, title=group, disable=false, sortOrder=null), semester=null, grouped=false)]
[INFO ] 2025-06-26 14:47:45.966 [Test worker] c.s.s.i.LessonServiceImpl - In isLessonForGroupExistsAndIgnoreWithId(lesson = [Lesson(id=1, hours=1, linkToMeeting=https://softserveinc.zoom.us/j/93198369163?pwd=Rk1GU281cDFtK1FCK3pJWXphRkJrQT09, subjectForSite=Human anatomy, lessonType=LECTURE, teacher=Teacher(id=10, name=Ivan, surname=Ivanov, patronymic=Ivanovych, position=Docent, userId=1, department=null, disable=false), subject=com.softserve.entity.Subject@5cdf6014, group=Group(id=1, title=group, disable=false, sortOrder=null), semester=null, grouped=false)])
[INFO ] 2025-06-26 14:47:45.966 [Test worker] c.s.s.i.LessonServiceImpl - In save(entity = [Lesson(id=1, hours=1, linkToMeeting=, subjectForSite=, lessonType=LECTURE, teacher=Teacher(id=10, name=Ivan, surname=Ivanov, patronymic=Ivanovych, position=Docent, userId=1, department=null, disable=false), subject=com.softserve.entity.Subject@5cdf6014, group=Group(id=1, title=group, disable=false, sortOrder=null), semester=null, grouped=false)]
[INFO ] 2025-06-26 14:47:45.967 [Test worker] c.s.s.i.LessonServiceImpl - In isLessonForGroupExists(lesson = [Lesson(id=1, hours=1, linkToMeeting=, subjectForSite=, lessonType=LECTURE, teacher=Teacher(id=10, name=Ivan, surname=Ivanov, patronymic=Ivanovych, position=Docent, userId=1, department=null, disable=false), subject=com.softserve.entity.Subject@5cdf6014, group=Group(id=1, title=group, disable=false, sortOrder=null), semester=null, grouped=false)])
[INFO ] 2025-06-26 14:47:45.977 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into update of PeriodServiceImpl with entity:Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.977 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.979 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into update of PeriodServiceImpl with entity:Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.979 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.979 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2025-06-26 14:47:45.979 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=06:00, endTime=07:00, name=Another period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.979 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=06:00, endTime=07:00, name=Another period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.979 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=06:00, endTime=07:00, name=Another period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.980 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getById of PeriodServiceImpl with id 1
[INFO ] 2025-06-26 14:47:45.981 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into update of PeriodServiceImpl with entity:Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.981 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.981 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2025-06-26 14:47:45.981 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=06:00, endTime=07:00, name=Another period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.981 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=06:00, endTime=07:00, name=Another period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.981 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=06:00, endTime=07:00, name=Another period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.981 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getById of PeriodServiceImpl with id 1
[INFO ] 2025-06-26 14:47:45.982 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into update of PeriodServiceImpl with entity:Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2025-06-26 14:47:45.982 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2025-06-26 14:47:45.982 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2025-06-26 14:47:45.982 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=03:00, endTime=04:00, name=Another period)] and newPeriod: Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2025-06-26 14:47:45.982 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=03:00, endTime=04:00, name=Another period), newPeriods: Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2025-06-26 14:47:45.982 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=03:00, endTime=04:00, name=Another period), newPeriod: Period(id=1, startTime=02:00, endTime=03:30, name=Some period)
[INFO ] 2025-06-26 14:47:45.983 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entity: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.983 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.983 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2025-06-26 14:47:45.983 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=03:00, endTime=04:00, name=Some period)] and newPeriod: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.983 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=03:00, endTime=04:00, name=Some period), newPeriods: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.983 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=03:00, endTime=04:00, name=Some period), newPeriod: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.983 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into nameExists method with name:Some period
[INFO ] 2025-06-26 14:47:45.984 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.984 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.984 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2025-06-26 14:47:45.984 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=05:00, endTime=06:00, name=Another period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.984 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=05:00, endTime=06:00, name=Another period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.984 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=05:00, endTime=06:00, name=Another period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.984 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into nameExists method with name:Some period
[INFO ] 2025-06-26 14:47:45.985 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entities:[Period(id=1, startTime=05:00, endTime=04:00, name=Some period)]
[INFO ] 2025-06-26 14:47:45.985 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.985 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entities:[Period(id=1, startTime=02:00, endTime=03:00, name=Some period)]
[INFO ] 2025-06-26 14:47:45.985 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.985 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2025-06-26 14:47:45.986 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isListOfPeriodsFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=03:00, endTime=04:00, name=Some period)], newPeriods: [Period(id=1, startTime=02:00, endTime=03:00, name=Some period)]
[INFO ] 2025-06-26 14:47:45.986 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=1, startTime=02:00, endTime=03:00, name=Some period)] and newPeriod: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.986 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=1, startTime=02:00, endTime=03:00, name=Some period), newPeriods: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.986 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=1, startTime=02:00, endTime=03:00, name=Some period), newPeriod: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.986 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=03:00, endTime=04:00, name=Some period)] and newPeriod: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.986 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=03:00, endTime=04:00, name=Some period), newPeriods: Period(id=1, startTime=02:00, endTime=03:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.986 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entity: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.986 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.986 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2025-06-26 14:47:45.987 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=02:00, endTime=03:00, name=Some period)] and newPeriod: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.987 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=02:00, endTime=03:00, name=Some period), newPeriods: Period(id=1, startTime=01:00, endTime=02:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.987 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getById of PeriodServiceImpl with id 1
[INFO ] 2025-06-26 14:47:45.988 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getById of PeriodServiceImpl with id 2
[INFO ] 2025-06-26 14:47:45.988 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entity: Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.988 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=05:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into save of PeriodServiceImpl with entities:[Period(id=1, startTime=03:00, endTime=04:00, name=Some period)]
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isTimeInvalid of PeriodServiceImpl with entity: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into getAll of PeriodServiceImpl
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isListOfPeriodsFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=01:00, endTime=02:00, name=another period), Period(id=1, startTime=03:00, endTime=04:00, name=Some period)], newPeriods: [Period(id=1, startTime=03:00, endTime=04:00, name=Some period)]
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=1, startTime=03:00, endTime=04:00, name=Some period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodFree of PeriodServiceImpl with entities oldPeriods: [Period(id=2, startTime=01:00, endTime=02:00, name=another period), Period(id=1, startTime=03:00, endTime=04:00, name=Some period)] and newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=2, startTime=01:00, endTime=02:00, name=another period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=2, startTime=01:00, endTime=02:00, name=another period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsGlued of PeriodServiceImpl with entities oldPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period), newPeriods: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:45.989 [Test worker] c.s.s.i.PeriodServiceImpl - Enter into isPeriodsIntersect of PeriodServiceImpl with entities oldPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period), newPeriod: Period(id=1, startTime=03:00, endTime=04:00, name=Some period)
[INFO ] 2025-06-26 14:47:46.001 [Test worker] c.s.s.i.RoomServiceImpl - Enter into save of RoomServiceImpl with entity:com.softserve.entity.Room@b098b79f
[INFO ] 2025-06-26 14:47:46.003 [Test worker] c.s.s.i.RoomServiceImpl - Enter into update of RoomServiceImpl with entity:com.softserve.entity.Room@e9bdb864
[INFO ] 2025-06-26 14:47:46.004 [Test worker] c.s.s.i.RoomServiceImpl - Enter into getById of RoomServiceImpl with id 2
[INFO ] 2025-06-26 14:47:46.006 [Test worker] c.s.s.i.RoomServiceImpl - Enter into update of RoomServiceImpl with entity:com.softserve.entity.Room@dd9a85b1
[INFO ] 2025-06-26 14:47:46.007 [Test worker] c.s.s.i.RoomServiceImpl - Enter into save of RoomServiceImpl with entity:com.softserve.entity.Room@b098b79f
[INFO ] 2025-06-26 14:47:46.007 [Test worker] c.s.s.i.RoomServiceImpl - Enter into getById of RoomServiceImpl with id 1
[INFO ] 2025-06-26 14:47:46.016 [Test worker] c.s.s.i.RoomTypeServiceImpl - In save(entity = [RoomType(id=1, description=1 roomType)]
[INFO ] 2025-06-26 14:47:46.019 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isRoomTypeExistsWithDescription(description = [1 roomType])
[INFO ] 2025-06-26 14:47:46.019 [Test worker] c.s.s.i.RoomTypeServiceImpl - In getById(id = [2])
[INFO ] 2025-06-26 14:47:46.020 [Test worker] c.s.s.i.RoomTypeServiceImpl - In update(entity = [RoomType(id=1, description=1 roomType)]
[INFO ] 2025-06-26 14:47:46.020 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2025-06-26 14:47:46.021 [Test worker] c.s.s.i.RoomTypeServiceImpl - In update(entity = [RoomType(id=1, description=1 roomType)]
[INFO ] 2025-06-26 14:47:46.021 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2025-06-26 14:47:46.021 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isRoomTypeExistsWithDescription(description = [1 roomType])
[ERROR] 2025-06-26 14:47:46.021 [Test worker] c.s.s.i.RoomTypeServiceImpl - RoomType with Description [1 roomType] already exists
[INFO ] 2025-06-26 14:47:46.021 [Test worker] c.s.s.i.RoomTypeServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:46.022 [Test worker] c.s.s.i.RoomTypeServiceImpl - In save(entity = [RoomType(id=1, description=1 roomType)]
[INFO ] 2025-06-26 14:47:46.022 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isRoomTypeExistsWithDescription(description = [1 roomType])
[INFO ] 2025-06-26 14:47:46.023 [Test worker] c.s.s.i.RoomTypeServiceImpl - In update(entity = [RoomType(id=1, description=updated roomType)]
[INFO ] 2025-06-26 14:47:46.023 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2025-06-26 14:47:46.023 [Test worker] c.s.s.i.RoomTypeServiceImpl - In isRoomTypeExistsWithDescription(description = [updated roomType])
[INFO ] 2025-06-26 14:47:46.089 [Test worker] c.s.s.i.ScheduleServiceImpl - Enter into sendScheduleToTeachers of TeacherServiceImpl
[INFO ] 2025-06-26 14:47:46.090 [Test worker] c.s.s.i.ScheduleServiceImpl - Enter into sendScheduleToTeacher of TeacherServiceImpl
[INFO ] 2025-06-26 14:47:46.090 [Test worker] c.s.s.i.ScheduleServiceImpl - In getScheduleForTeacher(semesterId = [4], teacherId[10])
[INFO ] 2025-06-26 14:47:46.092 [Test worker] c.s.u.PdfReportGenerator - Enter into teacherScheduleReport method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.340 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTeacherTable method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.357 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTableTitleCell method with tableWidth 3 and schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.367 [Test worker] c.s.u.TeacherTableBuilder - Enter into getAllPeriods method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.417 [Test worker] c.s.s.i.ScheduleServiceImpl - Enter into sendScheduleToTeacher of TeacherServiceImpl
[INFO ] 2025-06-26 14:47:46.418 [Test worker] c.s.s.i.ScheduleServiceImpl - In getScheduleForTeacher(semesterId = [4], teacherId[10])
[INFO ] 2025-06-26 14:47:46.419 [Test worker] c.s.u.PdfReportGenerator - Enter into teacherScheduleReport method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.419 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTeacherTable method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.419 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTableTitleCell method with tableWidth 3 and schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.419 [Test worker] c.s.u.TeacherTableBuilder - Enter into getAllPeriods method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.435 [Test worker] c.s.s.i.ScheduleServiceImpl - Enter into sendScheduleToTeacher of TeacherServiceImpl
[INFO ] 2025-06-26 14:47:46.435 [Test worker] c.s.s.i.ScheduleServiceImpl - In getScheduleForTeacher(semesterId = [4], teacherId[10])
[INFO ] 2025-06-26 14:47:46.435 [Test worker] c.s.u.PdfReportGenerator - Enter into teacherScheduleReport method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.436 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTeacherTable method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.436 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTableTitleCell method with tableWidth 3 and schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.437 [Test worker] c.s.u.TeacherTableBuilder - Enter into getAllPeriods method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.444 [Test worker] c.s.s.i.ScheduleServiceImpl - Enter into sendScheduleToTeacher of TeacherServiceImpl
[INFO ] 2025-06-26 14:47:46.445 [Test worker] c.s.s.i.ScheduleServiceImpl - In getScheduleForTeacher(semesterId = [4], teacherId[10])
[INFO ] 2025-06-26 14:47:46.445 [Test worker] c.s.u.PdfReportGenerator - Enter into teacherScheduleReport method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.446 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTeacherTable method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.446 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTableTitleCell method with tableWidth 3 and schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.446 [Test worker] c.s.u.TeacherTableBuilder - Enter into getAllPeriods method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=4, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@38b80f73, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.454 [Test worker] c.s.s.i.ScheduleServiceImpl - In schedulesForGroupedLessons(schedule = [Schedule(id=1, dayOfWeek=MONDAY, evenOdd=ODD, room=com.softserve.entity.Room@3c1, period=Period(id=null, startTime=null, endTime=null, name=null), lesson=Lesson(id=1, hours=0, linkToMeeting=null, subjectForSite=null, lessonType=null, teacher=null, subject=null, group=Group(id=null, title=null, disable=false, sortOrder=null), semester=Semester(id=null, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false), grouped=true))]
[INFO ] 2025-06-26 14:47:46.463 [Test worker] c.s.s.i.ScheduleServiceImpl - In getById(id = [2])
[INFO ] 2025-06-26 14:47:46.464 [Test worker] c.s.s.i.ScheduleServiceImpl - In update(entity = [Schedule(id=1, dayOfWeek=MONDAY, evenOdd=EVEN, room=com.softserve.entity.Room@3c1, period=Period(id=null, startTime=null, endTime=null, name=null), lesson=Lesson(id=null, hours=0, linkToMeeting=null, subjectForSite=null, lessonType=null, teacher=null, subject=null, group=Group(id=null, title=null, disable=false, sortOrder=null), semester=Semester(id=null, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false), grouped=false))]
[INFO ] 2025-06-26 14:47:46.464 [Test worker] c.s.s.i.ScheduleServiceImpl - In isConflictForGroupInSchedule(semesterId = [null], dayOfWeek = [MONDAY], evenOdd = [EVEN], classId = [null], lessonId = [null])
[INFO ] 2025-06-26 14:47:46.466 [Test worker] c.s.s.i.ScheduleServiceImpl - Enter into sendScheduleToTeacher of TeacherServiceImpl
[INFO ] 2025-06-26 14:47:46.466 [Test worker] c.s.s.i.ScheduleServiceImpl - In getScheduleForTeacher(semesterId = [1], teacherId[1])
[INFO ] 2025-06-26 14:47:46.466 [Test worker] c.s.u.PdfReportGenerator - Enter into teacherScheduleReport method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=1, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@37830fe9, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.467 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTeacherTable method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=1, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@37830fe9, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.467 [Test worker] c.s.u.TeacherTableBuilder - Enter into createTableTitleCell method with tableWidth 3 and schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=1, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@37830fe9, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))]) and language en
[INFO ] 2025-06-26 14:47:46.467 [Test worker] c.s.u.TeacherTableBuilder - Enter into getAllPeriods method with schedule ScheduleForTeacherDTO(semester=SemesterDTO(id=1, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, disable=false), teacher=com.softserve.dto.TeacherDTO@37830fe9, days=[DaysOfWeekWithClassesForTeacherDTO(day=MONDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[])), DaysOfWeekWithClassesForTeacherDTO(day=TUESDAY, evenWeek=ClassesInScheduleForTeacherDTO(periods=[]), oddWeek=ClassesInScheduleForTeacherDTO(periods=[]))])
[INFO ] 2025-06-26 14:47:46.474 [Test worker] c.s.s.i.ScheduleServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:46.475 [Test worker] c.s.s.i.ScheduleServiceImpl - In save(entity = [Schedule(id=1, dayOfWeek=MONDAY, evenOdd=ODD, room=com.softserve.entity.Room@3c1, period=Period(id=null, startTime=null, endTime=null, name=null), lesson=Lesson(id=1, hours=0, linkToMeeting=null, subjectForSite=null, lessonType=null, teacher=null, subject=null, group=Group(id=null, title=null, disable=false, sortOrder=null), semester=Semester(id=null, description=null, year=0, startDay=null, endDay=null, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false), grouped=false))]
[INFO ] 2025-06-26 14:47:46.475 [Test worker] c.s.s.i.ScheduleServiceImpl - In isConflictForGroupInSchedule(semesterId = [null], dayOfWeek = [MONDAY], evenOdd = [ODD], classId = [null], lessonId = [1])
[INFO ] 2025-06-26 14:47:46.476 [Test worker] c.s.s.i.ScheduleServiceImpl - Entered getAllOrdered(1)
[INFO ] 2025-06-26 14:47:46.490 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.490 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [2 semester], year = [0])
[INFO ] 2025-06-26 14:47:46.495 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=true, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.495 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [2 semester], year = [0])
[INFO ] 2025-06-26 14:47:46.496 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=true, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)]
[INFO ] 2025-06-26 14:47:46.496 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=true, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.496 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.497 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=false, defaultSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.497 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [2 semester], year = [0])
[INFO ] 2025-06-26 14:47:46.498 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)]
[INFO ] 2025-06-26 14:47:46.499 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.499 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.499 [Test worker] c.s.s.i.SemesterServiceImpl - In addGroupsToSemester (semester = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false)], groupIds = [[1, 2]])
[INFO ] 2025-06-26 14:47:46.500 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-03-10, endDay=2020-01-11, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.501 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY], periods=[Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.501 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.501 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.501 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.502 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[WEDNESDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.502 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.503 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-03-10, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false)]
[INFO ] 2025-06-26 14:47:46.503 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-03-10, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.504 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)]
[INFO ] 2025-06-26 14:47:46.504 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.504 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.504 [Test worker] c.s.s.i.SemesterServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:46.505 [Test worker] c.s.s.i.SemesterServiceImpl - In getById(id = [2])
[INFO ] 2025-06-26 14:47:46.545 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with studentDTO:com.softserve.dto.StudentDTO@3f1ef988
[INFO ] 2025-06-26 14:47:46.547 [Test worker] c.s.s.i.StudentServiceImpl - Enter into delete method with entity:Student(id=null, name=Name, surname=Surname, patronymic=Patronymic, user=User(id=1, email=userWithId1L@test.com, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null)
[INFO ] 2025-06-26 14:47:46.552 [Test worker] c.s.s.i.StudentServiceImpl - Enter into update method with studentDTO:com.softserve.dto.StudentDTO@1911033e
[INFO ] 2025-06-26 14:47:46.554 [Test worker] c.s.s.i.StudentServiceImpl - Enter into getAll method with no input params
[INFO ] 2025-06-26 14:47:46.554 [Test worker] c.s.s.i.StudentServiceImpl - Enter into update method with entity:Student(id=null, name=Name, surname=Surname, patronymic=Patronymic, user=User(id=1, email=userWithId1L@test.com, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null)
[INFO ] 2025-06-26 14:47:46.555 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with studentDTO:com.softserve.dto.StudentDTO@7b7a4290
[INFO ] 2025-06-26 14:47:46.556 [Test worker] c.s.s.i.StudentServiceImpl - Enter into getById method with id null
[INFO ] 2025-06-26 14:47:46.557 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with entity:Student(id=null, name=Name, surname=Surname, patronymic=Patronymic, user=User(id=1, email=userWithId1L@test.com, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null)
[INFO ] 2025-06-26 14:47:46.558 [Test worker] c.s.s.i.StudentServiceImpl - Enter into getById method with id 1
[INFO ] 2025-06-26 14:47:46.558 [Test worker] c.s.s.i.StudentServiceImpl - Enter into update method with studentDTO:com.softserve.dto.StudentDTO@2d15c1be
[INFO ] 2025-06-26 14:47:46.560 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with studentDTO:com.softserve.dto.StudentDTO@6bfd9965
[INFO ] 2025-06-26 14:47:46.560 [Test worker] c.s.s.i.StudentServiceImpl - Enter into registerStudent method with student Student(id=null, name=Hanna, surname=Romaniuk, patronymic=Stepanivna, user=null, group=null) and email:romaniuk@gmail.com
[INFO ] 2025-06-26 14:47:46.560 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with entity:Student(id=null, name=Hanna, surname=Romaniuk, patronymic=Stepanivna, user=User(id=1, email=romaniuk@gmail.com, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null)
[INFO ] 2025-06-26 14:47:46.560 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with studentDTO:com.softserve.dto.StudentDTO@6fa2f685
[INFO ] 2025-06-26 14:47:46.560 [Test worker] c.s.s.i.StudentServiceImpl - Enter into registerStudent method with student Student(id=null, name=Viktor, surname=Hanushchak, patronymic=Mykolaiovych, user=null, group=null) and email:hanushchak@bigmir.net
[INFO ] 2025-06-26 14:47:46.560 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with entity:Student(id=null, name=Viktor, surname=Hanushchak, patronymic=Mykolaiovych, user=User(id=2, email=hanushchak@bigmir.net, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null)
[INFO ] 2025-06-26 14:47:46.561 [Test worker] c.s.s.i.StudentServiceImpl - Enter into saveFromFile of StudentServiceImpl with groupId 4
[INFO ] 2025-06-26 14:47:46.665 [Test worker] c.s.s.i.StudentServiceImpl - Enter into registerStudent method with student Student(id=null, name=Hanna, surname=Romaniuk, patronymic=Stepanivna, user=User(id=1, email=romaniuk@gmail.com, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null) and email:romaniuk@gmail.com
[ERROR] 2025-06-26 14:47:46.665 [Test worker] c.s.s.i.StudentServiceImpl - Empty or null email: 
[INFO ] 2025-06-26 14:47:46.666 [Test worker] c.s.s.i.StudentServiceImpl - Enter into registerStudent method with student Student(id=null, name=Viktor, surname=Hanushchak, patronymic=Mykolaiovych, user=User(id=2, email=hanushchak@bigmir.net, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null) and email:hanushchak@bigmir.net
[INFO ] 2025-06-26 14:47:46.670 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with studentDTO:com.softserve.dto.StudentDTO@76d592d8
[INFO ] 2025-06-26 14:47:46.670 [Test worker] c.s.s.i.StudentServiceImpl - Enter into registerStudent method with student Student(id=null, name=Hanna, surname=Romaniuk, patronymic=Stepanivna, user=null, group=null) and email:romaniuk@gmail.com
[INFO ] 2025-06-26 14:47:46.670 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with entity:Student(id=null, name=Hanna, surname=Romaniuk, patronymic=Stepanivna, user=User(id=1, email=romaniuk@gmail.com, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null)
[INFO ] 2025-06-26 14:47:46.670 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with studentDTO:com.softserve.dto.StudentDTO@7acc0990
[INFO ] 2025-06-26 14:47:46.670 [Test worker] c.s.s.i.StudentServiceImpl - Enter into registerStudent method with student Student(id=null, name=Viktor, surname=Hanushchak, patronymic=Mykolaiovych, user=null, group=null) and email:hanushchak@bigmir.net
[INFO ] 2025-06-26 14:47:46.670 [Test worker] c.s.s.i.StudentServiceImpl - Enter into save method with entity:Student(id=null, name=Viktor, surname=Hanushchak, patronymic=Mykolaiovych, user=User(id=2, email=hanushchak@bigmir.net, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null)
[INFO ] 2025-06-26 14:47:46.671 [Test worker] c.s.s.i.StudentServiceImpl - Enter into saveFromFile of StudentServiceImpl with groupId 4
[INFO ] 2025-06-26 14:47:46.685 [Test worker] c.s.s.i.StudentServiceImpl - Enter into registerStudent method with student Student(id=null, name=Hanna, surname=Romaniuk, patronymic=Stepanivna, user=User(id=1, email=romaniuk@gmail.com, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null) and email:romaniuk@gmail.com
[ERROR] 2025-06-26 14:47:46.686 [Test worker] c.s.s.i.StudentServiceImpl - Empty or null email: 
[INFO ] 2025-06-26 14:47:46.686 [Test worker] c.s.s.i.StudentServiceImpl - Enter into registerStudent method with student Student(id=null, name=Viktor, surname=Hanushchak, patronymic=Mykolaiovych, user=User(id=2, email=hanushchak@bigmir.net, password=12345@testAa, role=ROLE_STUDENT, token=null), group=null) and email:hanushchak@bigmir.net
[INFO ] 2025-06-26 14:47:46.698 [Test worker] c.s.s.i.SubjectServiceImpl - In service getSubjects(semesterId = [1], teacherId = [3])
[INFO ] 2025-06-26 14:47:46.699 [Test worker] c.s.s.i.SubjectServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:46.700 [Test worker] c.s.s.i.SubjectServiceImpl - In getById(id = [2])
[INFO ] 2025-06-26 14:47:46.700 [Test worker] c.s.s.i.SubjectServiceImpl - In save(entity = [com.softserve.entity.Subject@13140525]
[INFO ] 2025-06-26 14:47:46.701 [Test worker] c.s.s.i.SubjectServiceImpl - In isSubjectExistsWithName(name = [some subject])
[INFO ] 2025-06-26 14:47:46.701 [Test worker] c.s.s.i.SubjectServiceImpl - In update(entity = [com.softserve.entity.Subject@1313fb77]
[INFO ] 2025-06-26 14:47:46.701 [Test worker] c.s.s.i.SubjectServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2025-06-26 14:47:46.702 [Test worker] c.s.s.i.SubjectServiceImpl - In save(entity = [com.softserve.entity.Subject@13140525]
[INFO ] 2025-06-26 14:47:46.702 [Test worker] c.s.s.i.SubjectServiceImpl - In isSubjectExistsWithName(name = [some subject])
[ERROR] 2025-06-26 14:47:46.702 [Test worker] c.s.s.i.SubjectServiceImpl - Subject with name some subject already exists
[INFO ] 2025-06-26 14:47:46.702 [Test worker] c.s.s.i.SubjectServiceImpl - In update(entity = [com.softserve.entity.Subject@e05e1047]
[INFO ] 2025-06-26 14:47:46.702 [Test worker] c.s.s.i.SubjectServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2025-06-26 14:47:46.702 [Test worker] c.s.s.i.SubjectServiceImpl - In isSubjectExistsWithNameAndIgnoreWithId(id = [1], name = [updated name])
[ERROR] 2025-06-26 14:47:46.702 [Test worker] c.s.s.i.SubjectServiceImpl - Subject with name [updated name] already exists
[INFO ] 2025-06-26 14:47:46.703 [Test worker] c.s.s.i.SubjectServiceImpl - In update(entity = [com.softserve.entity.Subject@e05e1047]
[INFO ] 2025-06-26 14:47:46.703 [Test worker] c.s.s.i.SubjectServiceImpl - In isExistsWithId(id = [1])
[INFO ] 2025-06-26 14:47:46.703 [Test worker] c.s.s.i.SubjectServiceImpl - In isSubjectExistsWithNameAndIgnoreWithId(id = [1], name = [updated name])
[INFO ] 2025-06-26 14:47:46.715 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getAll of getDisabled
[INFO ] 2025-06-26 14:47:46.716 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into delete method with entity:Teacher(id=1, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=null, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.717 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getAll()
[INFO ] 2025-06-26 14:47:46.718 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2025-06-26 14:47:46.719 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into save method with entity:Teacher(id=1, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=null, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.720 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getAllTeacherWithoutUser of TeacherServiceImpl
[INFO ] 2025-06-26 14:47:46.720 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into joinTeacherWithUser method with teacherId 1 and userId:1
[INFO ] 2025-06-26 14:47:46.721 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2025-06-26 14:47:46.721 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with entity:Teacher(id=1, name=Ivan, surname=Ivanov, patronymic=Ivanovych, position=docent, userId=1, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.726 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2025-06-26 14:47:46.727 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getByUserId with userId 1
[INFO ] 2025-06-26 14:47:46.732 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with dto:com.softserve.dto.TeacherForUpdateDTO@4e019a5a
[INFO ] 2025-06-26 14:47:46.732 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with entity:Teacher(id=1, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=1, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.736 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with dto:com.softserve.dto.TeacherForUpdateDTO@223ca7af
[INFO ] 2025-06-26 14:47:46.737 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with entity:Teacher(id=1, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=1, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.738 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into save method with dto:com.softserve.dto.TeacherDTO@17772ac3
[INFO ] 2025-06-26 14:47:46.738 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into save method with entity:Teacher(id=1, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=null, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.740 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into save method with dto:com.softserve.dto.TeacherDTO@55c8258e
[INFO ] 2025-06-26 14:47:46.740 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into save method with entity:Teacher(id=1, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=null, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.741 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into joinTeacherWithUser method with teacherId 1 and userId:1
[INFO ] 2025-06-26 14:47:46.741 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2025-06-26 14:47:46.742 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into joinTeacherWithUser method with teacherId 1 and userId:1
[INFO ] 2025-06-26 14:47:46.742 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2025-06-26 14:47:46.743 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into save method with dto:com.softserve.dto.TeacherDTO@75217179
[INFO ] 2025-06-26 14:47:46.743 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into registerTeacher method with teacher Teacher(id=null, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=null, department=null, disable=false) and email:teacher@gmail.com
[INFO ] 2025-06-26 14:47:46.743 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into save method with entity:Teacher(id=null, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=1, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.745 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getByUserId with userId 1
[INFO ] 2025-06-26 14:47:46.746 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with dto:com.softserve.dto.TeacherForUpdateDTO@4bcbadc9
[INFO ] 2025-06-26 14:47:46.746 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2025-06-26 14:47:46.746 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into registerTeacher method with teacher Teacher(id=1, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=null, department=null, disable=false) and email:teacher@gmail.com
[INFO ] 2025-06-26 14:47:46.746 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with entity:Teacher(id=1, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=1, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.749 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with dto:com.softserve.dto.TeacherForUpdateDTO@6cd33862
[INFO ] 2025-06-26 14:47:46.749 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into getById of TeacherServiceImpl with id 1
[INFO ] 2025-06-26 14:47:46.749 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into updateEmailInUserForTeacher method with email teacher@gmail.com and userId:1
[INFO ] 2025-06-26 14:47:46.750 [Test worker] c.s.s.i.TeacherServiceImpl - Enter into update method with entity:Teacher(id=1, name=Name1, surname=Surname1, patronymic=Patronymic1, position=Position1, userId=1, department=null, disable=false)
[INFO ] 2025-06-26 14:47:46.789 [Test worker] c.s.s.i.UserServiceImpl - Enter into registration method  with email:some@mail.com
[INFO ] 2025-06-26 14:47:46.789 [Test worker] c.s.s.i.UserServiceImpl - Enter into isPasswordValid method with password:qwert
[INFO ] 2025-06-26 14:47:46.790 [Test worker] c.s.s.i.UserServiceImpl - Enter into getById method with id 2
[INFO ] 2025-06-26 14:47:46.793 [Test worker] c.s.s.i.UserServiceImpl - Enter into findByEmail method with email:test@email.com
[INFO ] 2025-06-26 14:47:46.794 [Test worker] c.s.s.i.UserServiceImpl - Enter into findByToken method with token:qwerty123!@#
[INFO ] 2025-06-26 14:47:46.795 [Test worker] c.s.s.i.UserServiceImpl - Enter into update method with entity:User(id=1, email=update@mail.com, password=updatePassword, role=ROLE_USER, token=null)
[INFO ] 2025-06-26 14:47:46.795 [Test worker] c.s.s.i.UserServiceImpl - Enter into getById method with id 1
[INFO ] 2025-06-26 14:47:46.796 [Test worker] c.s.s.i.UserServiceImpl - Enter into update method with entity:User(id=1, email=email@mail.com, password=oldPassword, role=ROLE_USER, token=null)
[INFO ] 2025-06-26 14:47:46.796 [Test worker] c.s.s.i.UserServiceImpl - Enter into getById method with id 1
[INFO ] 2025-06-26 14:47:46.796 [Test worker] c.s.s.i.UserServiceImpl - Enter into findByEmail method with email:some@email.com
[INFO ] 2025-06-26 14:47:46.797 [Test worker] c.s.s.i.UserServiceImpl - Enter into getAllUsersWithRoleUser of UserServiceImpl
[INFO ] 2025-06-26 14:47:46.797 [Test worker] c.s.s.i.UserServiceImpl - Enter into save method with entity:User(id=null, email=test@email.com, password=password, role=ROLE_USER, token=null)
[INFO ] 2025-06-26 14:47:46.798 [Test worker] c.s.s.i.UserServiceImpl - Enter into emailExists method with email:test@email.com
[INFO ] 2025-06-26 14:47:46.798 [Test worker] c.s.s.i.UserServiceImpl - Enter into save method with entity:User(id=null, email=mail@email.com, password=Qwerty1!, role=ROLE_USER, token=null)
[INFO ] 2025-06-26 14:47:46.798 [Test worker] c.s.s.i.UserServiceImpl - Enter into emailExists method with email:mail@email.com
[INFO ] 2025-06-26 14:47:46.799 [Test worker] c.s.s.i.UserServiceImpl - Enter into resetPassword method  with email:some@mail.com
[INFO ] 2025-06-26 14:47:46.806 [Test worker] c.s.s.i.UserServiceImpl - Enter into findByToken method with token:qflkwrgn
[INFO ] 2025-06-26 14:47:46.806 [Test worker] c.s.s.i.UserServiceImpl - Enter into resetPassword method  with email:afvadf
[INFO ] 2025-06-26 14:47:46.807 [Test worker] c.s.s.i.UserServiceImpl - Enter into getById method with id 1
[WARN ] 2025-06-26 14:47:46.888 [Test worker] c.s.u.Translator - There is no translation of the word = word
[WARN ] 2025-06-26 14:47:46.889 [Test worker] c.s.u.Translator - There is no translation of the word = java
