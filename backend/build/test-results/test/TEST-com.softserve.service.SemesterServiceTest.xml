<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.softserve.service.SemesterServiceTest" tests="20" skipped="2" failures="0" errors="0" timestamp="2025-06-26T11:47:46.478Z" hostname="MacBook-Air-Ivan.local" time="0.027">
  <properties/>
  <testcase name="updateIfUpdatedSemesterDoestNotExists" classname="com.softserve.service.SemesterServiceTest" time="0.016"/>
  <testcase name="updateSemesterAndSetItAsCurrent" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <testcase name="saveSemesterAndSetItAsCurrent" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <testcase name="updateSemesterAndSetItAsDefault" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <testcase name="getDefaultSemesterIfSemesterExists" classname="com.softserve.service.SemesterServiceTest" time="0.0"/>
  <testcase name="saveSemesterAndSetItAsDefault" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <testcase name="addGroupsToSemester" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <testcase name="throwScheduleConflictExceptionIfCurrentSemesterNotFounded" classname="com.softserve.service.SemesterServiceTest" time="0.0"/>
  <testcase name="throwIncorrectTimeExceptionIfUpdatedStartTimeBeginAfterEndTime" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <testcase name="throwEntityAlreadyExistsExceptionIfDescriptionAlreadyExists" classname="com.softserve.service.SemesterServiceTest" time="0.0">
    <skipped/>
  </testcase>
  <testcase name="throwUsedEntityExceptionIfPeriodsHaveLessons" classname="com.softserve.service.SemesterServiceTest" time="0.0"/>
  <testcase name="throwEntityAlreadyExistsExceptionIfUpdatedDescriptionAlreadyExists" classname="com.softserve.service.SemesterServiceTest" time="0.0">
    <skipped/>
  </testcase>
  <testcase name="updateIfUpdatedSemesterHaveDaysWithoutLessons" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <testcase name="getCurrentSemesterIfSemesterExists" classname="com.softserve.service.SemesterServiceTest" time="0.0"/>
  <testcase name="throwUsedEntityExceptionIfDaysHaveLessons" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <testcase name="throwIncorrectTimeExceptionIfStartTimeBeginAfterEndTime" classname="com.softserve.service.SemesterServiceTest" time="0.0"/>
  <testcase name="saveSemesterIfSemesterDoesNotExists" classname="com.softserve.service.SemesterServiceTest" time="0.0"/>
  <testcase name="getSemesterById" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <testcase name="addGroupToSemester" classname="com.softserve.service.SemesterServiceTest" time="0.0"/>
  <testcase name="throwEntityNotFoundExceptionIfSemesterNotFounded" classname="com.softserve.service.SemesterServiceTest" time="0.001"/>
  <system-out><![CDATA[[INFO ] 2025-06-26 14:47:46.490 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.490 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [2 semester], year = [0])
[INFO ] 2025-06-26 14:47:46.495 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=true, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.495 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [2 semester], year = [0])
[INFO ] 2025-06-26 14:47:46.496 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=true, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)]
[INFO ] 2025-06-26 14:47:46.496 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=true, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.496 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.497 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=2 semester, year=0, startDay=2020-05-11, endDay=2020-06-22, currentSemester=false, defaultSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.497 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [2 semester], year = [0])
[INFO ] 2025-06-26 14:47:46.498 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)]
[INFO ] 2025-06-26 14:47:46.499 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=true, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.499 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.499 [Test worker] c.s.s.i.SemesterServiceImpl - In addGroupsToSemester (semester = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false)], groupIds = [[1, 2]])
[INFO ] 2025-06-26 14:47:46.500 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-03-10, endDay=2020-01-11, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.501 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY], periods=[Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.501 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.501 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.501 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.502 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[WEDNESDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.502 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.503 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-03-10, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false)]
[INFO ] 2025-06-26 14:47:46.503 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-03-10, currentSemester=false, defaultSemester=false, daysOfWeek=null, periods=null, groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.504 [Test worker] c.s.s.i.SemesterServiceImpl - In save(entity = [Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)]
[INFO ] 2025-06-26 14:47:46.504 [Test worker] c.s.s.i.SemesterServiceImpl - Enter into isTimeInvalid  with entity: Semester(id=1, description=1 semester, year=2020, startDay=2020-04-10, endDay=2020-05-10, currentSemester=false, defaultSemester=false, daysOfWeek=[MONDAY, TUESDAY], periods=[Period(id=null, startTime=null, endTime=null, name=3 para), Period(id=null, startTime=null, endTime=null, name=2 para), Period(id=null, startTime=null, endTime=null, name=4 para), Period(id=null, startTime=null, endTime=null, name=1 para)], groups=null, disable=false)
[INFO ] 2025-06-26 14:47:46.504 [Test worker] c.s.s.i.SemesterServiceImpl - In isSemesterExists (semesterId = [1],description = [1 semester], year = [2020])
[INFO ] 2025-06-26 14:47:46.504 [Test worker] c.s.s.i.SemesterServiceImpl - In getById(id = [1])
[INFO ] 2025-06-26 14:47:46.505 [Test worker] c.s.s.i.SemesterServiceImpl - In getById(id = [2])
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
