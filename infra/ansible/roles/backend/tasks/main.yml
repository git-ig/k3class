---
# Tasks for backend deployment
- name: Create backend directory
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/backend"
    state: directory
    mode: "0755"

- name: Check if Docker is installed
  ansible.builtin.command: docker --version
  register: docker_check
  failed_when: false
  changed_when: false

- name: Debug Docker status
  ansible.builtin.debug:
    msg: "Docker check result: {{ docker_check.rc }}"

- name: Fail if Docker is not available
  ansible.builtin.fail:
    msg: "Docker is not installed. Make sure the common role runs first."
  when: docker_check.rc != 0

- name: Pull backend image
  community.docker.docker_image:
    name: "{{ backend_image_url }}"
    source: pull
    force_source: true
  become: true

- name: Stop existing backend container
  community.docker.docker_container:
    name: backend
    state: absent
  become: true
  failed_when: false

- name: Run backend container
  community.docker.docker_container:
    name: backend
    image: "{{ backend_image_url }}"
    state: started
    restart_policy: always
    ports:
      - "8080:8080"
    env:
      NODE_ENV:
        production
        # db connection vars
      DB_HOST: "{{ hostvars['database_host']['ansible_host'] }}"
      DB_PORT: "5432"
      DB_NAME: "{{ vault_database_name }}"
      DB_USER: "{{ vault_database_user }}"
      DB_PASSWORD: "{{ vault_database_password }}"
      DATABASE_URL: >-
        postgresql://{{ vault_database_user }}:{{ vault_database_password }}@{{ hostvars['database_host']['ansible_host'] }}:5432/{{ vault_database_name }}
      REDIS_URL: "redis://{{ hostvars['database_host']['ansible_host'] }}:6379"
      # Redis vars
      REDIS_HOST: "{{ hostvars['database_host']['ansible_host'] }}"
      REDIS_PORT: "6379"
      # Hibernate config
      HIBERNATE_SHOW_SQL: "false"

    # depends_on:
    #   - postgres
    #   - redis
  become: true
